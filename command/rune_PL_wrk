#!/usr/bin/php
<?php 
/*
 * Copyright (C) 2013-2014 RuneAudio Team
 * http://www.runeaudio.com
 *
 * RuneUI
 * copyright (C) 2013-2014 - Andrea Coiutti (aka ACX) & Simone De Gregori (aka Orion)
 *
 * RuneOS
 * copyright (C) 2013-2014 - Simone De Gregori (aka Orion) & Carmelo San Giovanni (aka Um3ggh1U)
 *
 * RuneAudio website and logo
 * copyright (C) 2013-2014 - ACX webdesign (Andrea Coiutti)
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RuneAudio; see the file COPYING.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.txt>.
 *
 *  file: command/rune_PL_wrk
 *  version: 1.3
 *  coder: Simone De Gregori
 *
 */
// common include
ini_set('display_errors', '1');
ini_set('error_reporting', -1);
ini_set('error_log', '/var/log/runeaudio/rune_PL_wrk.log');
include('/var/www/app/libs/runeaudio.php');
error_reporting(E_ALL & ~E_NOTICE);

// reset worker logfile
sysCmd('echo "--------------- start: rune_PL_wrk ---------------" > /var/log/runeaudio/rune_PL_wrk.log');
runelog('WORKER rune_PL_wrk START');
// reset forceupdate state
$forceupdate = 1;

// --- WORKER MAIN LOOP --- //
while (1) {
    // Connect to Redis backend
    $redis = new Redis();
    $redis->pconnect('/run/redis.sock');
    $activePlayer = $redis->get('activePlayer');
    if ($activePlayer === 'MPD') {
        runelog('rune_PL_wrk: open MPD local UNIX socket');
        $socket = openMpdSocket('/run/mpd.sock', 0);
		if (!$socket) {
			$redis->close();
			sleep(5);
			continue;
		}
    } else if ($activePlayer === 'Spotify') {
        runelog('rune_PL_wrk: open SPOP socket');
        $socket = openSpopSocket('localhost', 6602, 1);
		if (!$socket) {
			$redis->close();
			sleep(5);
			continue;
		}
    }

    if (!$socket && $activePlayer !== "Airplay") {
        // exit script
        // die();
        $forceupdate = 1;
        sleep(3);
    } else {
        // MPD playback engine
		if ($activePlayer === 'MPD') {
			if ($forceupdate !== 0) {
				$forceupdate = 0;
				runelog('----------------------------------- FORCE UPDATE -----------------------------------');
				ui_update($redis, $socket, 0);
				sysCmd('curl -s -X GET http://localhost/command/?cmd=renderui');
			}
			$status = array();
			$status = _parseStatusResponse($redis, MpdStatus($socket));
			// store next songid
			$redis->set('nextsongid', $status['nextsongid']);
			// store "lastsongid"
			$redis->set('lastsongid', $status['songid']);
			$redis->set('pl_length', $status['playlistlength']);
			// set the mpd volume if a value is available
			if ((!empty($redis->get('lastmpdvolume'))) && ($redis->hGet('mpdconf', 'mixer_type') != 'disabled')) {
				$lastmpdvolume = $redis->get('lastmpdvolume');
				$retries_volume = 20;
				do {
					sleep(2);
					// retry until MPD is up and returns the requested volume
					$retval = sysCmd('mpc volume | grep "volume:" | cut -d ":" -f 2 | cut -d "%" -f 1');
					$mpdvolume = trim($retval[0]);
					unset($retval);
					if ($lastmpdvolume == $mpdvolume) {
						// make sure the UI has the correct value
						sysCmd('mpc volume '.$mpdvolume);
					} else if ($mpdvolume == 'n/a') {
						// something wrong, mismatch between redis and mpd 'disabled' values
						$retries_volume = 0;
					} else {
						// set the mpd volume, do a soft increase/decrease
						$setvolume = $mpdvolume-round((($mpdvolume-$lastmpdvolume)/2), 0, PHP_ROUND_HALF_UP);
						$retval = sysCmd('mpc volume '.$setvolume.' | grep "volume:" | cut -d ":" -f 2 | cut -d "%" -f 1');
						$mpdvolume = trim($retval[0]);
						unset($retval);
					}
				} while (($lastmpdvolume != $mpdvolume) && (--$retries_volume > 0));
			}
			do {
				// idle LOOP
				runelog('rune_PL_wrk: enter idle loop');
				$status = monitorMpdState($redis, $socket);
				// if we have lost the connection to mpd then break the loop
				if (!$status) {
					break;
				}

				// store next songid
				$redis->set('nextsongid', $status['nextsongid']);
				// store "lastsongid"
				$redis->set('lastsongid', $status['songid']);
				$redis->set('pl_length', $status['playlistlength']);

				// runelog('---------status data------------',$status);
				$status = ui_status($socket, $status);
				runelog('---------status data(2)------------',$status);
				// render Queue (push async)
				//if ($status['changed'] === 'playlist') {
				//    sysCmdAsync('ui_render_pl');
				//    runelog('---------------- PLAYLIST RENDER ----------------');
				//}
				
				// store information for lyrics and info
				$redis->hSet('lyrics', 'currentartist', lyricsStringClean($status['currentartist'], 'artist'));
				$redis->hSet('lyrics', 'currentsong', lyricsStringClean($status['currentsong']));
				$redis->hSet('lyrics', 'currentalbum', lyricsStringClean($status['currentalbum']));

				if ($status['changed'] === 'mixer') {
					//$redis->set('current_volume', $status['volume']);
					if ($redis->get('ao') === 'PianoDACPlus' && $redis->hget('mpdconf', 'mixer_type') === 'hardware') {
						sysCmd('amixer -D '.json_decode($redis->hget('acards', 'PianoDACPlus'))->mixer_device.' set Subwoofer '.$status['volume'].'%');
					}
				}
				
				// Global Random
				if (($redis->get('globalrandom') === '1') && ($status['state'] === 'stop') && ($redis->get('lock_globalrandom') === '1')) {
					// MPD now stopped, the last track was the last in the queue, ashuffle will start a new track in this status
					// to avoid displaying the first track in the queue force a UI update and skip the UI render step
					ui_update($redis, $socket, 0);
					// skip only once
					$redis->set('lock_globalrandom', 0);
				} else {
					// normal process render the UI
					// save JSON response for extensions
					runelog('rune_PL_wrk: ui_render() response', json_encode($status));
					ui_render('playback', json_encode($status));
				}
				If (($redis->get('globalrandom') === '1') && ($status['state'] === 'play') && ($redis->get('nextsongid') === '')) {
					// now playing the last track in the queue
					$redis->set('lock_globalrandom', 1);
				} else {
					// in all other circumstances do not skip 
					$redis->set('lock_globalrandom', 0);
				}
				$status['actPlayer'] = "MPD";
				$redis->set('act_player_info', json_encode($status));
				$errorcode = socket_last_error($socket);
				runelog('MPD last socket error = ', $errorcode);
				$retval = sysCmd('mpc volume | grep "volume:" | cut -d ":" -f 2 | cut -d "%" -f 1');
				$lastmpdvolume = preg_replace('/[^0-9]/', '', $retval[0]);
				if (!empty($lastmpdvolume)) {
					$redis->set('lastmpdvolume', $lastmpdvolume);
				}
				unset($retval);
			} while (($errorcode === 0) && ($redis->get('activePlayer') === 'MPD'));

			// close Redis connection
			//$redis->close();
			runelog('rune_PL_wrk: close MPD local UNIX socket');
			closeMpdSocket($socket);
			$forceupdate = 1;
		} elseif ($activePlayer === 'Spotify') {
			if ($forceupdate !== 0) {
				$forceupdate = 0;
				runelog('----------------------------------- FORCE UPDATE -----------------------------------');
				sysCmd('curl -s -X GET http://localhost/command/?cmd=renderui');
				sysCmdAsync('/var/www/command/ui_update_async');
			}
			$status = array();
			do {
				$status = monitorSpopState($socket);
				$status['playlist'] = $redis->hGet('spotify', 'plversion');
				ui_render('playback', json_encode($status));
				runelog('rune_PL_wrk: UI JSON', $status);
				runelog('rune_PL_wrk: close SPOP socket');

				// store information for lyrics and info
				$redis->hSet('lyrics', 'currentartist', lyricsStringClean($status['currentartist'], 'artist'));
				$redis->hSet('lyrics', 'currentsong', lyricsStringClean($status['currentsong']));
				$redis->hSet('lyrics', 'currentalbum', lyricsStringClean($status['currentalbum']));

				// save JSON response for extensions
				$status['actPlayer'] = "Spotify";
				$redis->set('act_player_info', json_encode($status));
				$errorcode = socket_last_error($socket);
				runelog('Spotify last socket error = ', $errorcode);
			} while  (($errorcode === 0) && ($redis->get('activePlayer') === 'Spotify'));
			closeSpopSocket($socket);
			$forceupdate = 1;
		} else if ($activePlayer === 'Airplay') {
			if ($forceupdate !== 0) {
				$forceupdate = 0;
				runelog('---------------------------- FORCE UPDATE Airplay ----------------------------------');
				sysCmd('rm -f /srv/http/tmp/airplay/airplay-cover.*');
//				$status = array();
				if (!empty($redis->get('lastmpdvolume'))) {
					$status['volume'] = $redis->get('lastmpdvolume');
				}
				$status['audio'] = "44100:16:2";
				$status['audio_sample_rate'] = "44.1";
				$status['audio_sample_depth'] = "16";
				$status['bitrate'] = "1411";
				$status['audio_channels'] = "Stereo";
				$status['random'] = "0";
				$status['single'] = "0";
				$status['consume'] = "0";
				$status['playlist'] = "";
				$status['playlistlength'] = "";
				$status['state'] = "play";
				$status['time'] = "0";
				$status['elapsed'] = "0";
				$status['song_percent'] = "100";
				$status['currentartist'] = "Airplay";
				$status['currentalbum'] = "-----";
				$status['currentsong'] = "-----";
				$status['actPlayer'] = "Airplay";
				$status['radioname'] = null;
				$status['OK'] = null;
				// save JSON response for extensions
				$redis->set('act_player_info', json_encode($status));
				ui_render('playback', json_encode($status));
				sysCmd('curl -s -X GET http://localhost/command/?cmd=renderui');
				sysCmdAsync('/var/www/command/ui_update_async');
			}
			do {
				sleep(2);
			} while ($redis->get('activePlayer') === 'Airplay');
			sleep(1);
		} else {
			$forceupdate = 1;
			sleep(1);
		}
		$forceupdate = 1;
    }
    // close Redis connection
    $redis->close();
// --- WORKER MAIN LOOP --- //
}
// These command never get executed!!!

